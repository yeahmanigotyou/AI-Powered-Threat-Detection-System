import tkinter as tk
from tkinter import filedialog, messagebox
import subprocess
import threading

class TsharkGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Tshark Capture Tool")

        self.interface = tk.StringVar()
        self.capture_file = tk.StringVar()

        # Interface selection dropdown
        self.interface_label = tk.Label(root, text="Select Network Interface:")
        self.interface_label.pack()
        self.interface_menu = tk.OptionMenu(root, self.interface, "eth0", "wlan0", "lo", "en0")  # Add more interfaces as needed
        self.interface_menu.pack()

        # File save location
        self.file_button = tk.Button(root, text="Select Save Location", command=self.select_file_location)
        self.file_button.pack()

        # Start and Stop buttons
        self.start_button = tk.Button(root, text="Start Capture", command=self.start_capture)
        self.start_button.pack()
        self.stop_button = tk.Button(root, text="Stop Capture", command=self.stop_capture)
        self.stop_button.pack()

        # Packet count and status label
        self.status_label = tk.Label(root, text="Status: Ready")
        self.status_label.pack()
        self.packet_count_label = tk.Label(root, text="Captured Packets: 0")
        self.packet_count_label.pack()

        self.process = None

    def select_file_location(self):
        # Open file dialog to select save location
        file_path = filedialog.asksaveasfilename(defaultextension=".pcap", filetypes=[("PCAP Files", "*.pcap")])
        if file_path:
            self.capture_file.set(file_path)

    def start_capture(self):
        interface = self.interface.get()
        file_location = self.capture_file.get()
        
        if not interface or not file_location:
            messagebox.showerror("Error", "Please select an interface and file location")
            return

        # Disable start button and enable stop button
        self.start_button.config(state="disabled")
        self.stop_button.config(state="normal")
        self.status_label.config(text="Status: Capturing...")

        # Run Tshark capture in a separate thread to avoid blocking the GUI
        self.process = subprocess.Popen(
            ["tshark", "-i", interface, "-w", file_location],
            stdout=subprocess.PIPE, stderr=subprocess.PIPE
        )

        # Update packet count (you can fetch this periodically by reading stdout)
        self.update_packet_count()

    def stop_capture(self):
        if self.process:
            self.process.terminate()
            self.process = None
            self.status_label.config(text="Status: Capture Stopped")
            self.start_button.config(state="normal")
            self.stop_button.config(state="disabled")

    def update_packet_count(self):
        if self.process:
            # This is a basic example. You could read the stdout and parse the number of packets
            # For simplicity, let's assume Tshark outputs the number of captured packets every few seconds
            # You could use a regular expression to parse packet counts, for example
            self.packet_count_label.config(text="Captured Packets: 1000")  # This should be dynamic

        self.root.after(1000, self.update_packet_count)  # Update every second

if __name__ == "__main__":
    root = tk.Tk()
    app = TsharkGUI(root)
    root.mainloop()
