import subprocess
import datetime
import json
import os
from pathlib import Path
from collections import defaultdict

class NetworkMonitor:
    def __init__(self, interface="eth0", output_dir="network_logs"):
        self.interface = interface
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(exist_ok=True)
        
    def start_tshark_capture(self, duration=300):
        """Start a tshark capture for specified duration (seconds)"""
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        output_file = self.output_dir / f"capture_{timestamp}.pcap"
        
        cmd = [
            "tshark",
            "-i", self.interface,
            "-w", str(output_file),
            "-a", f"duration:{duration}"
        ]
        
        print(f"Starting tshark capture for {duration} seconds...")
        subprocess.run(cmd)
        return output_file
    
    def run_nmap_scan(self, target_network):
        """Run an Nmap scan of the specified network"""
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        output_file = self.output_dir / f"nmap_scan_{timestamp}.json"
        
        cmd = [
            "nmap",
            "-sS",  # SYN scan
            "-sV",  # Version detection
            "-O",   # OS detection
            "--script=default",
            "-oX", "-",  # Output XML to stdout
            target_network
        ]
        
        print(f"Running Nmap scan on {target_network}...")
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        # Save the results
        with open(output_file, 'w') as f:
            f.write(result.stdout)
        
        return output_file
    
    def analyze_traffic(self, pcap_file):
        """Analyze a pcap file using tshark"""
        cmd = [
            "tshark",
            "-r", str(pcap_file),
            "-T", "fields",
            "-e", "ip.src",
            "-e", "ip.dst",
            "-e", "tcp.port",
            "-e", "udp.port",
            "-e", "frame.len"
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True)
        return self._parse_tshark_output(result.stdout)
    
    def _parse_tshark_output(self, output):
        """Parse tshark output into structured data"""
        traffic_data = {
            'connections': defaultdict(int),
            'ports': defaultdict(int),
            'total_bytes': 0
        }
        
        for line in output.split('\n'):
            if line:
                fields = line.strip().split()
                if len(fields) >= 5:
                    src, dst = fields[0], fields[1]
                    traffic_data['connections'][f"{src}->{dst}"] += 1
                    traffic_data['total_bytes'] += int(fields[4])
                    
                    # Add ports if present
                    if fields[2]:  # TCP port
                        traffic_data['ports'][fields[2]] += 1
                    if fields[3]:  # UDP port
                        traffic_data['ports'][fields[3]] += 1
        
        return traffic_data

    def monitor_network(self, target_network, duration=300):
        """Complete monitoring cycle"""
        print(f"Starting network monitoring cycle...")
        
        # 1. Capture traffic
        pcap_file = self.start_tshark_capture(duration)
        
        # 2. Run network scan
        nmap_results = self.run_nmap_scan(target_network)
        
        # 3. Analyze captured traffic
        traffic_analysis = self.analyze_traffic(pcap_file)
        
        # 4. Save summary report
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        report_file = self.output_dir / f"monitoring_report_{timestamp}.json"
        
        report = {
            'timestamp': timestamp,
            'duration': duration,
            'traffic_analysis': traffic_analysis,
            'pcap_file': str(pcap_file),
            'nmap_results_file': str(nmap_results)
        }
        
        with open(report_file, 'w') as f:
            json.dump(report, f, indent=2)
        
        print(f"Monitoring cycle complete. Report saved to {report_file}")
        return report_file

if __name__ == "__main__":
    monitor = NetworkMonitor(interface="eth0")
    monitor.monitor_network("192.168.1.0/24", duration=300)